{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiService = {\n  getLogs: async () => {\n    try {\n      const response = await api.get('/logs');\n      return response.data.logs;\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      throw new Error('Failed to fetch logs');\n    }\n  },\n  filterLogs: async (startDate, endDate, keyword) => {\n    try {\n      const response = await api.get(`/logs/filter?start_date=${startDate}&end_date=${endDate}&keyword=${keyword}`);\n      return response.data.logs;\n    } catch (error) {\n      console.error('Error filtering logs:', error);\n      throw new Error('Failed to filter logs');\n    }\n  },\n  getLogsByDate: async (startDate, endDate) => {\n    try {\n      const formattedStartDate = new Date(startDate).toISOString().split('T')[0];\n      const formattedEndDate = new Date(endDate).toISOString().split('T')[0];\n      const response = await api.get(`/logs/filter?start_date=${formattedStartDate}&end_date=${formattedEndDate}`);\n      return response.data.logs;\n    } catch (error) {\n      console.error('Error fetching logs by date:', error);\n      throw new Error('Failed to fetch logs by date');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","apiService","getLogs","response","get","data","logs","error","console","Error","filterLogs","startDate","endDate","keyword","getLogsByDate","formattedStartDate","Date","toISOString","split","formattedEndDate"],"sources":["/home/renan/testes/teste-tecnico-accenture/teste-tecnico-front/src/services/api.js"],"sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:5000'\n\nconst api = axios.create({\n   baseURL: API_URL,\n   headers: {\n      'Content-Type': 'application/json',\n   },\n})\n\nconst apiService = {\n   getLogs: async () => {\n      try {\n         const response = await api.get('/logs')\n         return response.data.logs\n      } catch (error) {\n         console.error('Error fetching logs:', error)\n         throw new Error('Failed to fetch logs')\n      }\n   },\n\n   filterLogs: async (startDate, endDate, keyword) => {\n      try {\n         const response = await api.get(\n            `/logs/filter?start_date=${startDate}&end_date=${endDate}&keyword=${keyword}`\n         )\n         return response.data.logs\n      } catch (error) {\n         console.error('Error filtering logs:', error)\n         throw new Error('Failed to filter logs')\n      }\n   },\n\n   getLogsByDate: async (startDate, endDate) => {\n      try {\n         const formattedStartDate = new Date(startDate).toISOString().split('T')[0];\n         const formattedEndDate = new Date(endDate).toISOString().split('T')[0];\n   \n         const response = await api.get(\n            `/logs/filter?start_date=${formattedStartDate}&end_date=${formattedEndDate}`\n         )\n         \n         return response.data.logs\n      } catch (error) {\n         console.error('Error fetching logs by date:', error)\n         throw new Error('Failed to fetch logs by date')\n      }\n   }\n}\n\nexport default apiService"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACtBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACN,cAAc,EAAE;EACnB;AACH,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG;EAChBC,OAAO,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACD,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,OAAO,CAAC;MACvC,OAAOD,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAM,IAAIE,KAAK,CAAC,sBAAsB,CAAC;IAC1C;EACH,CAAC;EAEDC,UAAU,EAAE,MAAAA,CAAOC,SAAS,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAChD,IAAI;MACD,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAC1B,2BAA0BO,SAAU,aAAYC,OAAQ,YAAWC,OAAQ,EAC/E,CAAC;MACD,OAAOV,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;IAC3C;EACH,CAAC;EAEDK,aAAa,EAAE,MAAAA,CAAOH,SAAS,EAAEC,OAAO,KAAK;IAC1C,IAAI;MACD,MAAMG,kBAAkB,GAAG,IAAIC,IAAI,CAACL,SAAS,CAAC,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1E,MAAMC,gBAAgB,GAAG,IAAIH,IAAI,CAACJ,OAAO,CAAC,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEtE,MAAMf,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAC1B,2BAA0BW,kBAAmB,aAAYI,gBAAiB,EAC9E,CAAC;MAED,OAAOhB,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;IAClD;EACH;AACH,CAAC;AAED,eAAeR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}