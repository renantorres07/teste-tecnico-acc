{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiService = {\n  getLogs: async () => {\n    try {\n      const response = await api.get('/logs');\n      return response.data.logs;\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      throw new Error('Failed to fetch logs');\n    }\n  },\n  filterLogs: async (startDate, endDate, keyword = '') => {\n    try {\n      let url = `/logs/filter?date__gte=${startDate}&date__lte=${endDate}`;\n      if (keyword) {\n        url += `&keyword=${keyword}`;\n      }\n      const response = await api.get(url);\n      return response.data.logs;\n    } catch (error) {\n      console.error('Error filtering logs:', error);\n      throw new Error('Failed to filter logs');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","apiService","getLogs","response","get","data","logs","error","console","Error","filterLogs","startDate","endDate","keyword","url"],"sources":["/home/renan/testes/teste-tecnico-accenture/teste-tecnico-front/src/service/api.js"],"sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:5000'\n\nconst api = axios.create({\n   baseURL: API_URL,\n   headers: {\n      'Content-Type': 'application/json',\n   },\n})\n\nconst apiService = {\n   getLogs: async () => {\n      try {\n         const response = await api.get('/logs')\n         return response.data.logs\n      } catch (error) {\n         console.error('Error fetching logs:', error)\n         throw new Error('Failed to fetch logs')\n      }\n   },\n\n   filterLogs: async (startDate, endDate, keyword = '') => {\n      try {\n         let url = `/logs/filter?date__gte=${startDate}&date__lte=${endDate}`\n\n         if (keyword) {\n            url += `&keyword=${keyword}`\n         }\n\n         const response = await api.get(url)\n         return response.data.logs\n      } catch (error) {\n         console.error('Error filtering logs:', error)\n         throw new Error('Failed to filter logs')\n      }\n   }\n}\n\nexport default apiService"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACtBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACN,cAAc,EAAE;EACnB;AACH,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG;EAChBC,OAAO,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACD,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,OAAO,CAAC;MACvC,OAAOD,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAM,IAAIE,KAAK,CAAC,sBAAsB,CAAC;IAC1C;EACH,CAAC;EAEDC,UAAU,EAAE,MAAAA,CAAOC,SAAS,EAAEC,OAAO,EAAEC,OAAO,GAAG,EAAE,KAAK;IACrD,IAAI;MACD,IAAIC,GAAG,GAAI,0BAAyBH,SAAU,cAAaC,OAAQ,EAAC;MAEpE,IAAIC,OAAO,EAAE;QACVC,GAAG,IAAK,YAAWD,OAAQ,EAAC;MAC/B;MAEA,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAACU,GAAG,CAAC;MACnC,OAAOX,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;IAC3C;EACH;AACH,CAAC;AAED,eAAeR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}